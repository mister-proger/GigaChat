Index: server/points/auth/auth/DBOperator/DBOperator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import psycopg2\r\n\r\ntry:\r\n    from . import generator\r\nexcept ImportError:\r\n    import generator\r\n\r\n\r\nconnection = psycopg2.connect(host='localhost', port=5432, user='postgres', password=_password)\r\n\r\n\r\n# debug\r\ndef drop_all_tables():\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema='public';\")\r\n\r\n        for table in cursor.fetchall():\r\n            cursor.execute(\"DROP TABLE IF EXISTS %s CASCADE\" % (table[0],))\r\n\r\n    connection.commit()\r\n\r\n\r\n# debug\r\ndef check_all_tables():\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select * from information_schema.tables WHERE table_schema='public';\")\r\n\r\n        for table in cursor.fetchall():\r\n            cursor.execute(f\"select * from {table[2]}\")\r\n            print(cursor.fetchall())\r\n\r\n\r\n# debug\r\ndef setup():\r\n    drop_all_tables()\r\n\r\n    cursor = connection.cursor()\r\n\r\n    cursor.execute('''\r\n        CREATE TABLE IF NOT EXISTS users (\r\n            id SERIAL PRIMARY KEY,\r\n            name TEXT UNIQUE,\r\n            confirmation INTEGER,\r\n            password TEXT,\r\n            email TEXT UNIQUE,\r\n            emails TEXT[],\r\n            phone TEXT UNIQUE,\r\n            nickname TEXT,\r\n            profile TEXT,\r\n            avatar BYTEA\r\n        )\r\n    ''')\r\n\r\n    cursor.execute('''\r\n        CREATE TABLE changes (\r\n            id INTEGER PRIMARY KEY,\r\n            name TIMESTAMP,\r\n            nickname TIMESTAMP,\r\n            password TIMESTAMP,\r\n            avatar TIMESTAMP,\r\n            FOREIGN KEY (id) REFERENCES users(id)\r\n        )\r\n    ''')\r\n\r\n    cursor.execute('''\r\n        CREATE TABLE tokens (\r\n            id INTEGER PRIMARY KEY,\r\n            client TEXT NOT NULL,\r\n            token TEXT NOT NULL,\r\n            FOREIGN KEY (id) REFERENCES users(id)\r\n        )\r\n    ''')\r\n\r\n    connection.commit()\r\n\r\n\r\ndef register(login, password, *, email=None, phone=None):\r\n    cursor = connection.cursor()\r\n\r\n    cursor.execute('''\r\n        INSERT INTO users (name, password, email, phone) VALUES (%s, %s, %s, %s)\r\n    ''', (login, generator.hasher(password), email, phone))\r\n\r\n    connection.commit()\r\n\r\n    return check('name', login)\r\n\r\n\r\ndef auth(login_type, login, password):\r\n    cursor = connection.cursor()\r\n\r\n    cursor.execute(f'''\r\n        SELECT password FROM users WHERE {login_type} = %s\r\n    ''', (login,))\r\n\r\n    return cursor.fetchone() == generator.hasher(password)\r\n\r\n\r\ndef check(login_type, login):\r\n    cursor = connection.cursor()\r\n\r\n    cursor.execute(f'''\r\n        SELECT id FROM users WHERE {login_type} = %s\r\n    ''', (login,))\r\n\r\n    return cursor.fetchone()\r\n\r\n\r\ndef create_token(agent, id):\r\n    cursor = connection.cursor()\r\n\r\n    token = generator.gen_token(id)\r\n\r\n    cursor.execute('''\r\n        INSERT INTO tokens (id, client, token) VALUES (%s, %s, %s)\r\n    ''', (id, agent, generator.hasher(token)))\r\n\r\n    connection.commit()\r\n\r\n    return token\r\n\r\n\r\ndef auth_token(token, agent, id):\r\n    cursor = connection.cursor()\r\n\r\n    cursor.execute('''\r\n        SELECT *\r\n        FROM tokens\r\n        WHERE id = %s AND agent = %s AND token = %s\r\n    ''', (id, agent, generator.hasher(token)))\r\n\r\n    return bool(cursor.fetchone())\r\n
===================================================================
diff --git a/server/points/auth/auth/DBOperator/DBOperator.py b/server/points/auth/auth/DBOperator/DBOperator.py
--- a/server/points/auth/auth/DBOperator/DBOperator.py	
+++ b/server/points/auth/auth/DBOperator/DBOperator.py	
@@ -6,6 +6,8 @@
     import generator
 
 
+_password = 'pRN|$jZAKC@XefDBaTxdkQoOWi5VuvbFl~m*U1H0tRsa*oeUDypN@Z#4~xGg@O@F'
+
 connection = psycopg2.connect(host='localhost', port=5432, user='postgres', password=_password)
 
 
